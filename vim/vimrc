"""" Enable Vundle: vim plugin manager

" required before Vundle initialization
set nocompatible        " disable compatibility mode with vi
filetype off            " disable filetype detection (but re-enable later, see below)

" set the runtime path to include Vundle, and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plugin 'nvim-treesitter/playground'
Plugin 'neovim/nvim-lspconfig'
Plugin 'hrsh7th/nvim-compe'
call vundle#end()
filetype plugin indent on


"""" Basic Behavior

set number              " show line numbers
set wrap                " wrap lines
set encoding=utf-8      " set encoding to UTF-8 (default was "latin1")
set path+=**            " enable recursive file search
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw screen only when we need to
set laststatus=2        " always show statusline (even with only single window)
set ruler               " show line and column number of the cursor on right side of statusline
set visualbell          " blink cursor on error, instead of beeping
set noswapfile          " disable swap file generation


"""" Status line

set statusline=
" Buffer number
set statusline+=[\ %n\ ]
" File description
set statusline+=\ %f
" Filetype
set statusline+=\ %y
" File encoding
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
" File format
set statusline+=\ [%{&fileformat}]
" Line, column and percentage
set statusline+=%=%-14.(%l,%c%V%)\ %p%%


"""" Key Bindings

" move vertically by visual line (don't skip wrapped lines)
nmap j gj
nmap k gk

" swap lines
nnoremap J ddp
nnoremap K ddkP

" get buffer list quickly
nnoremap <TAB> :b<SPACE>

" faster quickfix navigation
noremap <F7> :cn<CR>
noremap <S-F7> :cp<CR>
" F19 is S-F7 for neovim
noremap <F19> :cp<CR>


"""" Vim Appearance

" set 256-color mode
set t_Co=256

" put colorscheme files in ~/.vim/colors/ or in ~/.config/nvim/colors/
try
    colorscheme zenburn " good colorschemes: murphy, slate, molokai, badwolf, solarized
catch
endtry

" use filetype-based syntax highlighting, ftplugins, and indentation
syntax enable


"""" Tab settings

set tabstop=4           " width that a <TAB> character displays as
set expandtab           " convert <TAB> key-presses to spaces
set shiftwidth=4        " number of spaces to use for each step of (auto)indent
set softtabstop=4       " backspace after pressing <TAB> will remove up to this many spaces

set autoindent          " copy indent from current line when starting a new line
set smartindent         " even better autoindent (e.g. add indent after '{')


"""" Search settings

set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set smartcase           " try to be smart about cases

" turn off search highlighting with <CR> (carriage-return)
nnoremap <CR> :nohlsearch<CR><CR>


"""" Folding

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested folds max
set foldmethod=indent   " folding based on indentation level

" Toggle folding
nnoremap <SPACE> za


""" Browsing filesystem with netrw

let g:netrw_banner = 0          " remove directory banner
let g:netrw_liststyle = 3       " tree view
let g:netrw_browse_split = 4    " open file in previous window
let g:netrw_altv = 1            " open file in vertical split
let g:netrw_winsize = 15        " width of directory browser = 15% of the page
nnoremap <silent> ,f :Lex!<CR>


""" Debugging code with termdebug

packadd termdebug
let g:termdebug_wide=1
let g:termdebug_popup=0


"""" LSP

lua require('lspconfig').clangd.setup{}


"""" Compe

set completeopt=menuone,noselect

let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.resolve_timeout = 800
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
let g:compe.source.ultisnips = v:true
let g:compe.source.luasnip = v:true
let g:compe.source.emoji = v:true

inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
